apiVersion: apps/v1
kind: Deployment
metadata:
  name: id-delegation
  namespace: molam-id
  labels:
    app: id-delegation
    component: access-control
    tier: backend
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: id-delegation
  template:
    metadata:
      labels:
        app: id-delegation
        component: access-control
        tier: backend
    spec:
      serviceAccountName: id-delegation-sa
      containers:
      - name: id-delegation
        image: molam/id-delegation:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 3012
          name: http
          protocol: TCP
        env:
        - name: NODE_ENV
          value: "production"
        - name: PORT
          value: "3012"

        # Database
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: connection-string

        # Redis
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: redis-secret
              key: url

        # JWT
        - name: JWT_PUBLIC_KEY
          valueFrom:
            secretKeyRef:
              name: jwt-keys
              key: public-key
        - name: JWT_AUDIENCE
          value: "molam-id"
        - name: JWT_ISSUER
          value: "https://id.molam.com"

        # Audit
        - name: AUDIT_SERVICE_URL
          value: "http://id-audit:3006"

        # Health checks
        livenessProbe:
          httpGet:
            path: /livez
            port: 3012
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3

        readinessProbe:
          httpGet:
            path: /healthz
            port: 3012
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 2

        # Resources
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            memory: "512Mi"
            cpu: "500m"

---
apiVersion: v1
kind: Service
metadata:
  name: id-delegation
  namespace: molam-id
  labels:
    app: id-delegation
spec:
  type: ClusterIP
  ports:
  - port: 3012
    targetPort: 3012
    protocol: TCP
    name: http
  selector:
    app: id-delegation

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: id-delegation-sa
  namespace: molam-id

---
# CronJob pour expirer les délégations (backup, le service a déjà un timer interne)
apiVersion: batch/v1
kind: CronJob
metadata:
  name: delegation-expiry
  namespace: molam-id
spec:
  schedule: "*/5 * * * *"  # Every 5 minutes
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: expire
            image: postgres:15-alpine
            command:
            - psql
            - $(DATABASE_URL)
            - -c
            - "SELECT expire_delegations();"
            env:
            - name: DATABASE_URL
              valueFrom:
                secretKeyRef:
                  name: postgres-secret
                  key: connection-string
          restartPolicy: OnFailure
