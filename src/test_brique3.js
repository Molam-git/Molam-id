// src/test_brique3.js
import fetch from "node-fetch";
import jwt from "jsonwebtoken";
import dotenv from "dotenv";
import { execSync } from "child_process";

dotenv.config();

const API_URL = "http://127.0.0.1:3000/api";
let refreshToken = "";
let accessToken = "";
let molamId = "";

// Fonction utilitaire
async function test(name, fn) {
  try {
    console.log(`\nüß™  ${name}`);
    await fn();
    console.log(`‚úÖ  ${name} OK`);
  } catch (err) {
    console.error(`‚ùå  ${name} √©chou√© :`, err.message);
  }
}

async function post(path, body) {
  const res = await fetch(`${API_URL}${path}`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify(body),
  });
  if (!res.ok) {
    const text = await res.text();
    throw new Error(`${res.status} ${res.statusText}: ${text}`);
  }
  return res.json();
}

// V√©rifier que l'API est accessible
async function checkApiHealth() {
  try {
    console.log("üîç V√©rification de l'accessibilit√© de l'API...");
    const res = await fetch(`${API_URL}/health`, { timeout: 5000 });
    console.log("‚úÖ API accessible");
    return true;
  } catch (err) {
    console.error("‚ùå API non accessible. Assurez-vous que le serveur tourne :");
    console.error("   docker compose up -d");
    console.error("   docker compose logs api");
    return false;
  }
}

(async () => {
  // V√©rification pr√©alable
  const isApiUp = await checkApiHealth();
  if (!isApiUp) {
    console.log("\n‚ö†Ô∏è  Tests annul√©s : API non disponible");
    process.exit(1);
  }

  // 1Ô∏è‚É£ SIGNUP
  await test("Signup", async () => {
    const data = await post("/signup", {
      email: "auto_test@molam.sn",
      phone: "+221770001111",
      password: "secret",
    });
    console.log(data);
    molamId = data.molam_id;
    accessToken = data.access_token;
    refreshToken = data.refresh_token;
    
    if (!accessToken || !refreshToken) {
      throw new Error("Tokens manquants dans la r√©ponse");
    }
  });

  // 2Ô∏è‚É£ LOGIN
  await test("Login", async () => {
    const data = await post("/login", {
      email: "auto_test@molam.sn",
      password: "secret",
    });
    console.log(data);
    refreshToken = data.refresh_token;
    accessToken = data.access_token;
  });

  // 3Ô∏è‚É£ REFRESH
  await test("Refresh token", async () => {
    const data = await post("/refresh", { token: refreshToken });
    console.log(data);
    accessToken = data.access_token;
    refreshToken = data.refresh_token;
  });

  // 4Ô∏è‚É£ LOGOUT
  await test("Logout", async () => {
    const data = await post("/logout", { token: refreshToken });
    console.log(data);
  });

  // 5Ô∏è‚É£ AUDIT LOGS
  await test("V√©rification des logs d'audit", async () => {
    const logs = execSync(
      `docker compose exec db psql -U molam -d molam -c "SELECT action, meta FROM molam_audit_logs ORDER BY created_at DESC LIMIT 5;"`,
      { encoding: "utf-8" }
    );
    console.log(logs);
    if (!logs.includes("signup")) throw new Error("aucun log 'signup' trouv√©");
  });

  // 6Ô∏è‚É£ S√âCURIT√â DES HASHS
  await test("V√©rification des hashs", async () => {
    const users = execSync(
      `docker compose exec db psql -U molam -d molam -c "SELECT password_hash FROM molam_users LIMIT 1;"`,
      { encoding: "utf-8" }
    );
    if (users.includes("secret"))
      throw new Error("Mot de passe non hash√© !");
  });

  // 7Ô∏è‚É£ JWT
  await test("D√©codage JWT", async () => {
    if (!accessToken) {
      throw new Error("Pas de token disponible (les tests pr√©c√©dents ont √©chou√©)");
    }
    
    const decoded = jwt.decode(accessToken);
    console.log(decoded);
    
    if (!decoded) {
      throw new Error("Token non d√©codable");
    }
    
    if (!decoded.molam_id || !decoded.user_id) {
      throw new Error("Token invalide : champs manquants");
    }
  });

  console.log("\nüéâ  Tous les tests de la Brique 3 ont √©t√© ex√©cut√©s !");
})();